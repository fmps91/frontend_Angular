version: "3"

services:
  

  node:
    build: .
    container_name: node
    
    environment:
    ports:
      - 8092:80
    #command: sh -c "dockerize -wait tcp://postgres:8091 -timeout 300s -wait-retry-interval 30s /sayhello"
    #networks:
      #- my-net
    #expose:
      #- 8090
    #restart: always
    #ports:
      #- 8090:8080
    environment:
      #- DB_SERVER=database
      - POSTGRES_DB=users
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_PORT=5432
    networks:
      red2:
        ipv4_address: 10.7.0.6
    #links:
      #- gestion_usuarios
    #depends_on:
      #- database
   
      #- back-tier     ff
    #depends_on:
    #  - database
  

    
    #volumes:
      #- ./postgres:/var/lib/postgresql/data

    #env_file:
    #  - database.env # configure postgres
    #volumes:
    #  - database-data:/var/lib/postgresql/data/

  #database:
    #container_name: database
    #hostname: localhost
    #image: postgres:11-alpine
    #restart: always
    #expose:
      #- 5555
    #ports: 
    #  - 5432:5432 
    #command: postgres -c config_file=/etc/postgresql/postgresql.conf
    #args:
      #a: a_value
      
    #environment: 
   
    #  - POSTGRES_PASSWORD=postgres
    #  - POSTGRES_USER=postgres
    #  - POSTGRES_DB=users
    #  - PGDATA=/var/lib/postgresql/data/pgdata

    #volumes:
      #- ./postgres.conf:/etc/postgresql/postgresql.conf
    #  - ./gestion_users.sql:/docker-entrypoint-initdb.d/schema.sql 


# networks:
#   front-tier:
#   back-tier:

networks:
  red2:
    driver: bridge
    ipam:
      config:
        - subnet: 10.7.0.0/16